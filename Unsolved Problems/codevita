Even Odd
Problem Description
Given a range [low, high] (both inclusive), select K numbers from the range (a number can be chosen multiple times) such that sum of those K numbers is even.

Calculate the number of all such permutations.

As this number can be large, print it modulo (1e9 +7).

Constraints
0 <= low <= high <= 10^9

K <= 10^6.

Input
First line contains two space separated integers denoting low and high respectively

Second line contains a single integer K.

Output
Print a single integer denoting the number of all such permutations

Time Limit
1

Examples
Example 1

Input

4 5

3

Output

4

Explanation

There are 4 valid permutations viz. {4, 4, 4}, {4, 5, 5}, {5, 4, 5} and {5, 5, 4} which sum up to an even number

Example 2

Input

1 10

2

Output

50

Explanation

There are 50 valid permutations viz. {1,1}, {1, 3},.. {1, 9} {2,2}, {2, 4},... {2, 10} . . . {10, 2}, {10, 4},... {10, 10}. These 50 permutations, each sum up to an even number.

import java.io.*;

import java.util.*;
import java.lang.*;
class GFG { 
public static int count=0;
static void printAllKLength(int[] set, int k) 
{ 
	int n = set.length; 
	printAllKLengthRec(set, "", n, k); 
} 

static void printAllKLengthRec(int[] set, 
							String prefix, 
							int n, int k) 
{ 
	int sum=0;
	if (k == 0) 
	{ 	sum=0;
	//	System.out.println(prefix);
     
      	for(int i=0; i<prefix.length(); i++) {
    char temp = prefix.charAt(i);
    if (Character.isDigit(temp)) {
        int b = Integer.parseInt(String.valueOf(temp));
        sum=sum+b;
    }
}
      if(sum%2==0){
      GFG.count=GFG.count+1;
        }
      sum=0;
		return; 
	} 

	for (int i = 0; i < n; ++i) 
	{ 

		String newPrefix = prefix + set[i]; 

		printAllKLengthRec(set, newPrefix, 
								n, k - 1); 
	} 
} 


public static void main(String[] args) 
{ 
	Scanner sc=new Scanner(System.in); 
  	int lower=sc.nextInt();
  	int upper=sc.nextInt();
  //	System.out.println("lower"+lower);
  //	System.out.println("upper"+upper);
  	int n=upper-(lower-1);
  //	System.out.println("n"+n);
  	int[] set1=new int[n];
  for(int i=0;i<n;i++){
    set1[i]=lower;
    lower++;
  }
	int k = sc.nextInt(); 
	printAllKLength(set1, k); 
 // System.out.println("First Test");
	System.out.print(GFG.count);
	
} 
} 
